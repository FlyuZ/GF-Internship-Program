// Copyright (C) 2022
// Author zfy <522893161@qq.com>
// Build on 2022/11

package gf

import (
	"context"
	"log"
	"sync"

	redis "github.com/go-redis/redis/v8"
)

var (
	ctx          = context.Background()
	clusterAddrs = []string{"192.168.3.28:7001", "192.168.3.28:7003", "192.168.3.28:7005"}
	password     = "gf123456"
	client, _ = NewGoRedisClient()
	wg sync.WaitGroup
	random_client_id = []string{
		"691480561193", "991901594226", "093228024753", "902152659980", "677539460009", "158293574822", "682861270949", "149634593539", "866436173610", "432261066541", "212043813049", "555340979404", "229093876984", "757721061178", "021705950471", "677601744223", "320679218212", "432705818647", "158986102216", "727987584486", "959719516777", "738152028280", "438185167465", "942054030284", "164162533276", "422073291599", "261287046489", "948042040587", "807106729719", "109083208696", "240057665731", "676625786905", "054788425102", "800744952758", "234139769491", "774244770615", "911482242191", "963051459517", "837882905622", "522930089561", "032209849986", "318558780247", "954399933272", "018884707363", "710926541969", "773874727349", "850917991542", "312542849347", "664296036440", "933102703497", "207455500413", "951223969347", "471398922276", "487230332706", "481883259847", "781063140566", "999790902549", "544583671353", "102482760981", "759740164301", "720322457329", "972272194147", "047151868125", "031035838895", "150503338862", "876992565545", "627036779127", "943833980711", "706936910227", "515126938809", "584922526414", "962781591280", "781286848133", "390408705650", "877300451840", "534285127882", "845874812003", "844905767882", "520883036388", "983766961571", "688061611169", "307340303882", "127439828511", "702896747122", "321107842607", "415710152745", "617309269118", "005783939929", "334694122789", "756099419084", "568412646920", "252449862577", "858516941259", "479976108607", "324559964857", "849000874207", "385145050623", "964375937143", "827691120722", "860050833263"}
)

func NewGoRedisClient() (*redis.ClusterClient, error) {
	client := redis.NewClusterClient(&redis.ClusterOptions{
		Addrs:    clusterAddrs,
		Password: password,
	})
	if err := client.Ping(ctx).Err(); err != nil {
		log.Println(err)
		return nil, err
	}
	return client, nil
}


// 最新价消息结构体
type LastPriceInfo struct {
	Exchange_type string  // 市场
	Stock_code    string  //代码
	Last_price    float64 // 最新价
}

// 成交记录消息结构体
type StockInfo struct {
	Client_id       string //客户号
	Exchange_type   string //市场
	Stock_code      string //代码
	Entrust_bs      string //买卖方向"1":买入、"2":卖出
	Business_amount int64  //成交数量
}

// 持仓消息结构体
type HoldingInfo struct {
	Client_id     string  //客户号
	Exchange_type string  //市场
	Stock_code    string  //代码
	Hold_amount   int64   //持仓数量
	Last_price    float64 //最新价
	Market_value  float64 //市值hold_amount*last_price
}

